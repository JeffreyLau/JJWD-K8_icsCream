on early-init
    start ueventd

on init

sysclktz 0

loglevel 3

# setup the global environment
    export PATH /sbin:/vendor/bin:/system/sbin:/system/bin:/system/xbin
    export LD_LIBRARY_PATH /vendor/lib:/system/lib
    export ANDROID_BOOTLOGO 1
    export ANDROID_ROOT /system
    export ANDROID_DATA /data
    export EXTERNAL_STORAGE /mnt/sdcard
    export LOOP_MOUNTPOINT /mnt/obb

# Backward compatibility
    symlink /system/etc /etc
    symlink /sys/kernel/debug /d

# Right now vendor lives on the same filesystem as system,
# but someday that may change.
    symlink /system/vendor /vendor

# create mountpoints
    mkdir /mnt 0775 root system
    mkdir /mnt/sdcard 0000 system system

# Backwards Compat - XXX: Going away in G*
    symlink /mnt/sdcard /sdcard

    mkdir /system
    mkdir /data 0771 system system
    mkdir /cache 0770 system cache
    mkdir /config 0500 root root

    mkdir /data/nvram 0600 system system

    # Filesystem image public mount points.
    mkdir /mnt/obb 0700 root system
    mount tmpfs tmpfs /mnt/obb mode=0755,gid=1000

    write /proc/sys/kernel/panic_on_oops 1
    write /proc/sys/kernel/hung_task_timeout_secs 0
    write /proc/cpu/alignment 4
    write /proc/sys/kernel/sched_latency_ns 10000000
    write /proc/sys/kernel/sched_wakeup_granularity_ns 2000000
    write /proc/sys/kernel/sched_compat_yield 1
    write /proc/sys/kernel/sched_child_runs_first 0

on fs
# mount mtd partitions
    # Mount /system rw first to give the filesystem a chance to save a checkpoint
    mount yaffs2 mtd@system /system nandboot
    mkdir /system/secro 0600 system system
    # RIL need to do this before the folder /system changed to read only
    chown radio system /system/etc/ril
    chmod 0770 /system/etc/ril
    chmod 0444 /system/etc/ril/oper.lis
    mount yaffs2 mtd@system /system ro remount nandboot
    mount yaffs2 mtd@userdata /data nosuid nodev nandboot
    mount yaffs2 mtd@cache /cache nosuid nodev nandboot

on post-fs
    # once everything is setup, no need to modify /
    mount rootfs rootfs / ro remount

    # We chown/chmod /data again so because mount is run as root + defaults
    chown system system /data
    chmod 0771 /data

    # Same reason as /data above
    chown system cache /cache
    chmod 0770 /cache

    mkdir /cache/recovery 0770 system system

    # mount yaffs2 mtd@nvram /nvram nandboot
    mount yaffs2 mtd@secstatic /system/secro nandboot
    mount yaffs2 mtd@secstatic /system/secro ro remount nandboot

    # This may have been created by the recovery system with odd permissions
    chown system cache /cache/recovery
    chmod 0770 /cache/recovery

    #change permissions on vmallocinfo so we can grab it from bugreports
    chown root log /proc/vmallocinfo
    chmod 0440 /proc/vmallocinfo

    #change permissions on kmsg & sysrq-trigger so bugreports can grab kthread stacks
    chown root system /proc/kmsg
    chmod 0440 /proc/kmsg
    chown root system /proc/sysrq-trigger
    chmod 0220 /proc/sysrq-trigger

# create basic filesystem structure
    mkdir /data/misc 01771 system misc
    mkdir /data/misc/bluetoothd 0770 bluetooth bluetooth
    mkdir /data/misc/bluetooth 0770 system system
    mkdir /data/misc/keystore 0700 keystore keystore
    mkdir /data/misc/vpn 0770 system system
    mkdir /data/misc/systemkeys 0700 system system
    mkdir /data/misc/vpn/profiles 0770 system system
    # give system access to wpa_supplicant.conf for backup and restore
    mkdir /data/misc/wifi 0770 wifi wifi
    chmod 0770 /data/misc/wifi
    chmod 0660 /data/misc/wifi/wpa_supplicant.conf
    mkdir /data/local 0771 shell shell
    mkdir /data/local/tmp 0771 shell shell
    mkdir /data/data 0771 system system
    mkdir /data/app-private 0771 system system
    mkdir /data/app 0771 system system
    mkdir /data/property 0700 root root

    # create the lost+found directories, so as to enforce our permissions
    mkdir /data/lost+found 0770
    mkdir /cache/lost+found 0770

    # double check the perms, in case lost+found already exists, and set owner
    chown root root /data/lost+found
    chmod 0770 /data/lost+found
    chown root root /cache/lost+found
    chmod 0770 /cache/lost+found

    # load driver base driver
    insmod /system/lib/modules/mtk_drvb_73.ko
    mknod /dev/drvb c 176 0
    chmod 0666 /dev/drvb

## Custom pos-fs area (START)
# Please add custom fs operation below
    #
    # MT6620 related device nodes & configuration (begin)
    #

    #/dev/ttyMT2 for GPS Debugging purpose
    chmod 0666 /dev/ttyMT2
    chown system system /dev/ttyMT2

    # Turn on MT6620 by default
    chmod 0666 /sys/class/rfkill/rfkill0/state
    chown system system /sys/class/rfkill/rfkill0/state
    write sys/class/rfkill/rfkill0/state 1

    #/dev/ttyMT1 for STP Tunnel
    chmod 0666 /dev/ttyMT1
    chown system system /dev/ttyMT1

    # STP, WMT, GPS, FM and BT Driver
    insmod /system/lib/modules/mtk_stp_core.ko
    insmod /system/lib/modules/mtk_stp_uart.ko
    insmod /system/lib/modules/mtk_hif_sdio.ko
    insmod /system/lib/modules/mtk_stp_wmt.ko
    insmod /system/lib/modules/mtk_stp_gps.ko
    insmod /system/lib/modules/mtk_stp_bt.ko
    insmod /system/lib/modules/mt6620_fm_drv.ko

    # Create char device file for WMT, GPS, BT, FM
    mknod /dev/stpwmt c 190 0;
    mknod /dev/stpgps c 191 0;
    mknod /dev/stpbt  c 192 0;
    mknod /dev/fm     c 193 0;
    chmod 0660 /dev/stpwmt
    # BT
    chmod 0666 /dev/stpbt
    # FM Radio device, FIXME: this is not a proper way to set permissions
    chmod 0666 /dev/fm
    # GPS
    chmod 0666 /dev/gps
    chmod 0660 /dev/stpgps

    # WiFi
    mkdir /data/misc/wifi 0770 wifi wifi
    mkdir /data/misc/wifi/sockets 0770 wifi wifi
    mkdir /data/misc/wpa_supplicant 0770 wifi wifi
    mkdir /data/misc/dhcp 0770 dhcp dhcp
    chown dhcp dhcp /data/misc/dhcp
    chmod 0660 /sys/class/rfkill/rfkill1/state
    chown wifi system /sys/class/rfkill/rfkill1/state
    # Turn off wifi by default
    write sys/class/rfkill/rfkill1/state 0

    # Load WiFi Driver (factory mode application does the stuff)
    #insmod /system/lib/modules/wlan.ko

    #
    # MT6620 related device nodes & configuration (end)
    #

    # Touch Panel
    chown root diag /sys/module/tpd_setting/parameters/tpd_calmat
    chown root diag /sys/module/tpd_setting/parameters/tpd_em_debounce_time
    chown root diag /sys/module/tpd_debug/parameters/tpd_em_log
    chown root diag /sys/module/tpd_debug/parameters/tpd_em_log_to_fs

    chmod 0777 /dev/pmem_multimedia
    chmod 0777 /dev/mt6516-isp
    chmod 0777 /dev/mt6516-IDP
    chmod 0777 /dev/mt9p012
    chmod 0777 /dev/mt6516_jpeg
    chmod 0777 /dev/FM50AF

    # RTC
    mkdir /data/misc/rtc 0777 system system

    # Modem related device nodes
    mkdir /data/nvram/md 0700 root root

    insmod /system/lib/modules/ccci.ko
    insmod /system/lib/modules/ccci_md.ko
    insmod /system/lib/modules/ccci_tty.ko
    insmod /system/lib/modules/ccci_fs.ko
    insmod /system/lib/modules/ccci_pmic.ko
    insmod /system/lib/modules/ccmni.ko

    mknod /dev/ccci c 180 0
    mknod /dev/ccci_fs c 178 0
    mknod /dev/ccci_sys_rx c 180 2
    mknod /dev/ccci_sys_tx c 180 3
    mknod /dev/ccci_pcm_rx c 180 4
    mknod /dev/ccci_pcm_tx c 180 5
    mknod /dev/ccci_uart1_rx c 180 6
    mknod /dev/ccci_uart1_rx_ack c 180 7

    chmod 0666 /dev/ccci
    chmod 0660 /dev/ccci_fs
    chmod 0666 /dev/ccci_pcm_rx
    chmod 0666 /dev/ccci_pcm_tx
    chmod 0600 /dev/ccci_sys_rx
    chmod 0600 /dev/ccci_sys_tx
    chmod 0600 /dev/ccci_uart1_rx
    chmod 0600 /dev/ccci_uart1_rx_ack
    chmod 0660 /dev/ttyC0

    # M4U
    insmod /system/lib/modules/mt6573_m4u.ko
    mknod /dev/M4U_device c 188 0
    chmod 0666 /dev/M4U_device
    
    # Sensor
    chmod 0666 /dev/sensor

    chmod 0666 /dev/msensor
    chmod 0666 /dev/gsensor
    
    mkdir /data/amit/

    # GPIO
    chmod 0666 /dev/mtgpio
## Custom pos_fs area (END) 

on boot
# basic network init
    ifup lo
    hostname localhost
    domainname localdomain

# Define RIL properties
    setprop rild.nw.operlist /system/etc/ril/oper.lis
    # AGPS
    chmod 0777 /system/bin/mtk_agpsd

# Start default class, this line is very important!!
   class_start default

## Daemon processes to be run by init.
##

service ueventd /sbin/ueventd
    critical

service console /system/bin/sh
    console
    disabled
    user root
    group log

on property:ro.secure=0
    start console

# adbd is controlled by the persist.service.adb.enable system property
service adbd /sbin/adbd
    disabled

# adbd on at boot in emulator
on property:ro.kernel.qemu=1
    start adbd

on property:persist.service.adb.enable=1
    start adbd

on property:persist.service.adb.enable=0
    stop adbd

## Custom service area (START)
# Please add custom service below
service ccci_fsd /system/bin/ccci_fsd
    user root
    oneshot

service ccci_mdinit /system/bin/ccci_mdinit
    user root
    oneshot

service nvram_daemon /system/bin/nvram_daemon
    user root
    oneshot

service ami304d /system/bin/logwrapper /system/bin/ami304d
#
# MT6620 related services (Begin)
#
service 6620_launcher /system/bin/6620_launcher 4000000 /system/etc/firmware/mt6620_patch_hdr.bin
    user root
    oneshot
#
# MT6620 related services (End)
#
## Custom service area (END)
